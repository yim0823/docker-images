global
  maxconn 81920

defaults REDIS
 mode tcp
 option  tcplog
 timeout connect 4s
 timeout server 15s
 timeout client 15s
 timeout tunnel 365d

frontend redis-master
 bind *:5000 name redis                             # 5000번 포트에 대한 bind 정보입니다.
 log /var/log local2 info
 default_backend bk_redis_master                 # 5000번 포트로 신호가 들어오면 backend 를 실행

backend bk_redis_master
 option tcp-check                                   # tcp-check 를 통해 접근가능한 서버 필터링
# tcp-check send AUTH\ password1234\r\n                      # 비밀번호 password1234를 입력하고 Redis 서버에 접속합니다.
# tcp-check expect string +OK                        # OK가 왔는지?
 tcp-check send PING\r\n                            # PING 을 날려 신호를 점검합니다.
 tcp-check expect string +PONG                      # PONG 이라는 응답이 왔는지?
 tcp-check send info\ replication\r\n               # info replication 명령을 날려 Redis 에 대한 정보를 받아옵니다.
 tcp-check expect string role:master                # role 이 master 인지 확인 합니다.

 # repl_backlog_active 의 값이 1인지 확인합니다
 # 이 조건을 추가한 이유는 Failover 간 잠시의 시간동안 Master 가 2대가 되는데 그것을 방지 하기 위함입니다.
 # (진짜 Master Redis 에만 1, slave 는 0)
 tcp-check expect string repl_backlog_active:1
 tcp-check send QUIT\r\n                            # QUIT 명령을 전송
 tcp-check expect string +OK

 server server0 redis-ha-announce-0:6379 check inter 1s     # 1초 단위로 해당 ip의 port 로 체크합니다.
 server server1 redis-ha-announce-1:6379 check inter 1s     # 1초 단위로 해당 ip의 port 로 체크합니다.
 server server2 redis-ha-announce-2:6379 check inter 1s     # 1초 단위로 해당 ip의 port 로 체크합니다.
 server server3 redis-ha-announce-3:6379 check inter 1s     # 1초 단위로 해당 ip의 port 로 체크합니다.

frontend redis-slave
 bind *:5001 name redis                              # 5001번 포트에 대한 bind 정보입니다.
 log /var/log local2 info
 default_backend bk_redis_slave

backend bk_redis_slave
 option tcp-check
# tcp-check send AUTH\ password1234\r\n
# tcp-check expect string +OK
 tcp-check send PING\r\n
 tcp-check expect string +PONG
 tcp-check send info\ replication\r\n
 tcp-check expect string role:slave                 # role key 가 slave 인지 확인 합니다.
 tcp-check send QUIT\r\n
 tcp-check expect string +OK

 server server0 redis-ha-announce-0:6379 check inter 1s     # 1초 단위로 해당 ip의 port 로 체크합니다.
 server server1 redis-ha-announce-1:6379 check inter 1s     # 1초 단위로 해당 ip의 port 로 체크합니다.
 server server2 redis-ha-announce-2:6379 check inter 1s     # 1초 단위로 해당 ip의 port 로 체크합니다.
 server server3 redis-ha-announce-3:6379 check inter 1s     # 1초 단위로 해당 ip의 port 로 체크합니다.

# Listen on all IP's on port 9000, 9000 포트로 접근 시, Web Console 에 진입할 수 있습니다.
listen stats 
   bind 0.0.0.0:9000
   mode http
   log global
   option httplog
   log /var/log local0 info
   balance
   timeout client 5000 
   timeout connect 4000 
   timeout server 30000 

   # This is the virtual URL to access the stats page
   stats uri /haproxy_stats 
   # Authentication realm. This can be set to anything. Escape space characters with a backslash.
   stats realm HAProxy\ Statistics 

   # The user/pass you want to use. Change this password!
   stats auth admin:1234                            # Web Console 에 접근하는 계정/암호 설정

   # This allows you to take down and bring up back end servers.
   # This will produce an error on older versions of HAProxy.
   stats admin if TRUE